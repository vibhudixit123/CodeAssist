import { B as Block } from './Button-cca92c6b.js';
import { S as Static } from './Index-3b1865e7.js';
import Index$1 from './Index-24a33ce1.js';
import './index-ec890757.js';
import './svelte/svelte.js';

const Accordion_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/accordion/shared/Accordion.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	append,
	attr,
	create_slot: create_slot$1,
	detach: detach$1,
	element,
	get_all_dirty_from_scope: get_all_dirty_from_scope$1,
	get_slot_changes: get_slot_changes$1,
	init: init$1,
	insert: insert$1,
	listen,
	safe_not_equal: safe_not_equal$1,
	set_data,
	set_style,
	space: space$1,
	text,
	toggle_class,
	transition_in: transition_in$1,
	transition_out: transition_out$1,
	update_slot_base: update_slot_base$1
} = window.__gradio__svelte__internal;
function create_fragment$1(ctx) {
	let button;
	let span0;
	let t0;
	let t1;
	let span1;
	let t3;
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot$1(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			button = element("button");
			span0 = element("span");
			t0 = text(/*label*/ ctx[1]);
			t1 = space$1();
			span1 = element("span");
			span1.textContent = "â–¼";
			t3 = space$1();
			div = element("div");
			if (default_slot) default_slot.c();
			attr(span0, "class", "svelte-s1r2yt");
			attr(span1, "class", "icon svelte-s1r2yt");
			set_style(span1, "transform", /*open*/ ctx[0] ? "rotate(0)" : "rotate(90deg)");
			attr(button, "class", "label-wrap svelte-s1r2yt");
			toggle_class(button, "open", /*open*/ ctx[0]);
			set_style(div, "display", /*open*/ ctx[0] ? "block" : "none");
		},
		m(target, anchor) {
			insert$1(target, button, anchor);
			append(button, span0);
			append(span0, t0);
			append(button, t1);
			append(button, span1);
			insert$1(target, t3, anchor);
			insert$1(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*label*/ 2) set_data(t0, /*label*/ ctx[1]);

			if (dirty & /*open*/ 1) {
				set_style(span1, "transform", /*open*/ ctx[0] ? "rotate(0)" : "rotate(90deg)");
			}

			if (!current || dirty & /*open*/ 1) {
				toggle_class(button, "open", /*open*/ ctx[0]);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base$1(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope$1(/*$$scope*/ ctx[2])
						: get_slot_changes$1(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (dirty & /*open*/ 1) {
				set_style(div, "display", /*open*/ ctx[0] ? "block" : "none");
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out$1(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(button);
				detach$1(t3);
				detach$1(div);
			}

			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { open = true } = $$props;
	let { label = "" } = $$props;
	const click_handler = () => $$invalidate(0, open = !open);

	$$self.$$set = $$props => {
		if ('open' in $$props) $$invalidate(0, open = $$props.open);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [open, label, $$scope, slots, click_handler];
}

class Accordion extends SvelteComponent$1 {
	constructor(options) {
		super();
		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, { open: 0, label: 1 });
	}
}

/* home/runner/work/gradio/gradio/js/accordion/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	add_flush_callback,
	assign,
	bind,
	binding_callbacks,
	create_component,
	create_slot,
	destroy_component,
	detach,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_object,
	get_spread_update,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_slot_base
} = window.__gradio__svelte__internal;
function create_default_slot_2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (21:1) <Accordion {label} bind:open>
function create_default_slot_1(ctx) {
	let column;
	let current;

	column = new Index$1({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(column.$$.fragment);
		},
		m(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope*/ 512) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(column, detaching);
		}
	};
}

// (14:0) <Block {elem_id} {elem_classes} {visible}>
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let accordion;
	let updating_open;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[6].autoscroll },
		{ i18n: /*gradio*/ ctx[6].i18n },
		/*loading_status*/ ctx[5]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	function accordion_open_binding(value) {
		/*accordion_open_binding*/ ctx[8](value);
	}

	let accordion_props = {
		label: /*label*/ ctx[1],
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*open*/ ctx[0] !== void 0) {
		accordion_props.open = /*open*/ ctx[0];
	}

	accordion = new Accordion({ props: accordion_props });
	binding_callbacks.push(() => bind(accordion, 'open', accordion_open_binding));

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(accordion.$$.fragment);
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t, anchor);
			mount_component(accordion, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 96)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 64 && { autoscroll: /*gradio*/ ctx[6].autoscroll },
					dirty & /*gradio*/ 64 && { i18n: /*gradio*/ ctx[6].i18n },
					dirty & /*loading_status*/ 32 && get_spread_object(/*loading_status*/ ctx[5])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const accordion_changes = {};
			if (dirty & /*label*/ 2) accordion_changes.label = /*label*/ ctx[1];

			if (dirty & /*$$scope*/ 512) {
				accordion_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*open*/ 1) {
				updating_open = true;
				accordion_changes.open = /*open*/ ctx[0];
				add_flush_callback(() => updating_open = false);
			}

			accordion.$set(accordion_changes);
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(accordion.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(accordion.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(accordion, detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				visible: /*visible*/ ctx[4],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];

			if (dirty & /*$$scope, label, open, gradio, loading_status*/ 611) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { label } = $$props;
	let { elem_id } = $$props;
	let { elem_classes } = $$props;
	let { visible = true } = $$props;
	let { open = true } = $$props;
	let { loading_status } = $$props;
	let { gradio } = $$props;

	function accordion_open_binding(value) {
		open = value;
		$$invalidate(0, open);
	}

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('open' in $$props) $$invalidate(0, open = $$props.open);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(6, gradio = $$props.gradio);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		open,
		label,
		elem_id,
		elem_classes,
		visible,
		loading_status,
		gradio,
		slots,
		accordion_open_binding,
		$$scope
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 1,
			elem_id: 2,
			elem_classes: 3,
			visible: 4,
			open: 0,
			loading_status: 5,
			gradio: 6
		});
	}
}

export { Index as default };
//# sourceMappingURL=Index-5751965a.js.map
